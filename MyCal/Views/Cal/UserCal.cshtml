@model AppUser

<div id='calendar'></div>

@section Scripts
    {
    <script>
        var appointments = JSON.parse('@Json.Serialize(@Model.Appointments)');
        let events = [];
        if (appointments) {
            for (let i = 0; i < appointments.length; i++) {
                const p = appointments[i];
                events.push({title:"id#"+p.id, start: p.start, end:p.end});
                console.log(p);
            }
        }
        var calendarEl = document.getElementById('calendar');

        var calendar = new FullCalendar.Calendar(calendarEl, {
            //selectable: true,
            initialView: "timeGridWeek",
            headerToolbar: {
                left: "prev,next today",
                center: "title",
                right: "dayGridMonth,timeGridWeek,timeGridDay,listWeek"
            },
            events: events,
            eventTimeFormat: {
                hour: "numeric",
                minute: "2-digit",
                timeZoneName: "short"
            },
            dateClick: async function (info) {
                let uri = '/Cal/SetupMeeting';
                try {
                    const response = await fetch(uri,{
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(info.dateStr)
                    });
                    const jsonData = await response.json(); //string
                    const data = JSON.parse(jsonData);
                    console.log(data);
                    //alert('clicked ' + info.dateStr);
                    addMeetingEvent("Event#"+data.id, data.start, data.end)

                }
                catch (err) {
                    console.error('Unable to update item.', error);
                    alert(error);
                }
            },
            select: function (info) {
                alert('selected ' + info.startStr + ' to ' + info.endStr);
            }
        });

        calendar.render();

        function addMeetingEvent(title, start, end) {
            const sdate = new Date(start); 
            const edate = new Date(end);
            if (!isNaN(sdate.valueOf()) && !isNaN(edate.valueOf())) {
                calendar.addEvent({ title: title, start: sdate, end: edate });
            }else{
                console.error("Invalid dates: " + start + " OR " + end)
            }
        }
                            //});
    </script>
}